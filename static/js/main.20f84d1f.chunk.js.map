{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","process","Map","handleViewportChange","_this","props","onViewportChange","map","getCenter","toArray","_this2","this","container","node","style","on","addSource","type","data","users","features","addLayer","id","source","paint","circle-radius","circle-color","getSource","setData","remove","_this3","react_default","a","createElement","width","height","ref","Component","App","state","undefined","uid","_ref","_ref2","Object","slicedToArray","longitude","latitude","set","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","auth","onAuthStateChanged","user","setState","database","concat","onDisconnect","signInAnonymously","snapshot","val","entries","_ref3","_ref4","key","_ref4$","geometry","coordinates","properties","color","i","c","toString","toUpperCase","substring","length","intToRGB","str","hash","charCodeAt","hashCode","src_Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20f84d1f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nclass Map extends Component {\n  componentDidMount() {\n    this.map = new mapboxgl.Map({\n      container: this.node,\n      style: \"mapbox://styles/mapbox/streets-v9\"\n    });\n\n    this.map.on(\"move\", this.handleViewportChange);\n    this.map.on(\"zoom\", this.handleViewportChange);\n\n    this.map.on(\"load\", () => {\n      this.map.addSource(\"users\", {\n        type: \"geojson\",\n        data: this.props.users || {\n          type: \"FeatureCollection\",\n          features: [],\n        }\n      });\n\n      this.map.addLayer({\n        id: \"users\",\n        source: \"users\",\n        type: \"circle\",\n        paint: {\n          \"circle-radius\": 10,\n          \"circle-color\": ['get', 'color'],\n        }\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.map && this.map.getSource(\"users\")) {\n      this.map.getSource(\"users\").setData(this.props.users);\n    }\n  }\n\n  componentWillUnmount() {\n    this.map.remove();\n  }\n\n  handleViewportChange = () => {\n    this.props.onViewportChange(this.map.getCenter().toArray());\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"100vw\", height: \"100vh\" }}\n        ref={node => {\n          this.node = node;\n        }}\n      />\n    );\n  }\n}\n\nexport default Map;\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport React, { Component } from \"react\";\nimport Map from \"./Map\";\n\nfunction hashCode(str) {\n  var hash = 0;\n  for (var i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  return hash;\n}\n\nfunction intToRGB(i) {\n  var c = (i & 0x00ffffff).toString(16).toUpperCase();\n\n  return \"00000\".substring(0, 6 - c.length) + c;\n}\n\nclass App extends Component {\n  state = {\n    users: undefined,\n    uid: undefined\n  };\n\n  componentDidMount() {\n    var config = {\n      apiKey: \"AIzaSyCIvQz1UxN_6f-wPggmuT3zbKxABMyqj5I\",\n      authDomain: \"follow-me-map.firebaseapp.com\",\n      databaseURL: \"https://follow-me-map.firebaseio.com\",\n      projectId: \"follow-me-map\",\n      storageBucket: \"follow-me-map.appspot.com\",\n      messagingSenderId: \"561126193715\"\n    };\n\n    firebase.initializeApp(config);\n\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ uid: user.uid });\n\n        this.ref = firebase.database().ref(`users/${user.uid}`);\n\n        this.ref.onDisconnect().set(null);\n\n        this.ref.set({\n          longitude: 0,\n          latitude: 0\n        });\n      }\n    });\n\n    firebase.auth().signInAnonymously();\n\n    firebase\n      .database()\n      .ref(\"users\")\n      .on(\"value\", snapshot => {\n        const data = snapshot.val() || {};\n\n        const users = {\n          type: \"FeatureCollection\",\n          features: Object.entries(data).map(\n            ([key, { longitude, latitude }]) => ({\n              type: \"Feature\",\n              geometry: {\n                type: \"Point\",\n                coordinates: [longitude, latitude]\n              },\n              properties: {\n                uid: key,\n                color: \"#\" + intToRGB(hashCode(key))\n              }\n            })\n          )\n        };\n\n        this.setState({ users });\n      });\n  }\n\n  handleViewportChange = ([longitude, latitude]) => {\n    if (this.ref) {\n      this.ref.set({ longitude, latitude });\n    }\n  };\n\n  render() {\n    return (\n      <Map\n        onViewportChange={this.handleViewportChange}\n        uid={this.state.uid}\n        users={this.state.users}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}